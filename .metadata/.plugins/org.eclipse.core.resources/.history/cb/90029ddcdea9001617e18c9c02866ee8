/*
 *  A simple example for SPI.

 *
 *  This example configures SPI for output and sends a byte every second.
 *
 *  Copyright (c) 2014 Stefan Taferner <stefan.taferner@gmx.at>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 3 as
 *  published by the Free Software Foundation.
 */

#include <sblib/eib/sblib_default_objects.h>
#include <sblib/core.h>
#include <sblib/ioports.h>
#include <sblib/spi.h>
#include <sblib/serial.h>
#include <sblib/timeout.h>

#include <u8g_arm.h>
#include <M2tk.h>
#include <m2ghu8g.h>
#include "lcd.h"
#include "params.h"
#include <sblib/i2c/SHT2x.h>
#include <sblib/i2c/iaq-core.h>
#include "pwm.h"
#include "app_temp_control.h"

#define _DEBUG__

#ifdef _DEBUG__
Serial Serial(PIO2_7, PIO2_8);
#endif

//SPI spi(SPI_PORT_0);

int blinkPin = PIO0_7;

SHT2xClass SHT21;

IAQcoreClass IAQcore;

// Debouncers for inputs
Debouncer inputDebouncer[NUM_CHANNELS]; // debouncing for both buttons

// Timeout
Timeout timeout[NUM_TIMED_VALUES];

// Input pins
static const int inputPins[] = { PIO2_3, PIO2_2 }; // input pins for both buttons

static const int uiKeyUpPin = PIO0_7;
static const int uiKeyDownPin = PIO1_6;
static const int uiKeySelectPin = 2;
static const int uiKeyExitPin = 0;

M2_LABEL(hello_world_label, NULL, "Hello World 42");
M2tk m2(&hello_world_label, NULL, NULL, m2_gh_u8g_bfs);

void draw_menu(void) {
	m2.draw();
}



/*=========================================================================*/
/* Forward declaration of the toplevel element */
M2_EXTERN_ALIGN(top_el_x2l_menu);


/*=========================================================================*/
/* Define three user menus, just for demonstration. */

M2_ROOT(el_mnu1_sel, "t1", "Menu 1 selected", &top_el_x2l_menu);
M2_ALIGN(top_el_mnu1_sel, "-1|1W64H64", &el_mnu1_sel);

M2_ROOT(el_mnu2_sel, "t1", "Menu 2 selected", &top_el_x2l_menu);
M2_ALIGN(top_el_mnu2_sel, "-1|1W64H64", &el_mnu2_sel);

M2_ROOT(el_mnu3_sel, "t1", "Menu 3 selected", &top_el_x2l_menu);
M2_ALIGN(top_el_mnu3_sel, "-1|1W64H64", &el_mnu3_sel);


/*=========================================================================*/
uint8_t value = 0;
char buf[20];

/* define callback procedure, which returns a menu entry with a value */
const char *xmenu_value(uint8_t idx, uint8_t msg)
{
  if ( msg == M2_STRLIST_MSG_GET_STR ) {
    strcpy(buf, " Value: ");
    //itoa((int)value, buf+strlen(buf), 10);
    return buf;
  }
  return "";
}

/* define callback procedures which increment and decrement a value */
const char *xmenu_inc(uint8_t idx, uint8_t msg) {
  if ( msg == M2_STRLIST_MSG_SELECT  ) {
      value++;
  }
  return "";
}

const char *xmenu_dec(uint8_t idx, uint8_t msg) {
  if ( msg == M2_STRLIST_MSG_SELECT  ) {
      value--;
  }
  return "";
}

/*=========================================================================*/
/* this is the overall menu structure for the X2L Menu */

m2_xmenu_entry xmenu_data[] =
{
  { "Menu 1", NULL, NULL },		/* expandable main menu entry */
  { ".", NULL, xmenu_value },		/* The label of this menu line is returned by the callback procedure */
  { ". Inc", NULL, xmenu_inc },		/* This callback increments the value */
  { ". Dec", NULL, xmenu_dec },		/* This callback decrements the value */
  { "Menu 2", NULL, NULL },
  { ". Sub 2-1", &top_el_mnu1_sel, NULL },
  { ". Sub 2-2", &top_el_mnu2_sel, NULL},
  { ". Sub 2-3", &top_el_mnu3_sel, NULL },
  { NULL, NULL, NULL },
};

/*=========================================================================*/
/* This is the main menu dialog box */

/* The first visible line and the total number of visible lines. */
/* Both values are written by M2_X2LMENU and read by M2_VSB */
uint8_t el_x2l_first = 0;
uint8_t el_x2l_cnt = 3;

/* M2_X2LMENU definition */
/* Option l4 = four visible lines */
/* Option e15 = first column has a width of 15 pixel */
/* Option W43 = second column has a width of 43/64 of the display width */
/* Option F3 = select font 3 for the extra column (icons) */

M2_X2LMENU(el_x2l_strlist, "l4e15W43F3", &el_x2l_first, &el_x2l_cnt, xmenu_data, 65,102,'\0');
M2_SPACE(el_x2l_space, "W1h1");
M2_VSB(el_x2l_vsb, "l4W2r1", &el_x2l_first, &el_x2l_cnt);
M2_LIST(list_x2l) = { &el_x2l_strlist, &el_x2l_space, &el_x2l_vsb };
M2_HLIST(el_x2l_hlist, NULL, list_x2l);
M2_ALIGN(top_el_x2l_menu, "-1|1W64H64", &el_x2l_hlist);



/*
 * Initialize the application.
 */
void setup() {

//	bcu.setProgPin(PIN_PROG);

	bcu.begin(76, 0x474, 2);  // we are a MDT temperatur controller, version 1.2

//	pinMode(blinkPin, OUTPUT);

//	memcpy(userEeprom.order, hardwareVersion, sizeof(hardwareVersion));

	// Enable the serial port with 19200 baud, no parity, 1 stop bit
#ifdef _DEBUG__
	serial.begin(19200);
	serial.println("UC1701x Display Taster TEST");
#endif

	// Configure the input pins and initialize the debouncers with the current
	// value of the pin.
//	for (int channel = 0; channel < NUM_CHANNELS; ++channel) {
//		pinMode(inputPins[channel], INPUT | HYSTERESIS | PULL_UP);
//		inputDebouncer[channel].init(digitalRead(inputPins[channel]));
//	}

	u8g_InitComFn(&u8g, &u8g_dev_uc1701_mini12864_hw_spi, u8g_com_hw_spi_fn);

	u8g_SetDefaultForegroundColor(&u8g);

	/* 2. Setup m2 */
	m2_Init(&top_el_x2l_menu, m2_es_arduino, m2_eh_4bs, m2_gh_u8g_bfs);

	/* connect u8glib with m2tklib */
	m2_SetU8g(&u8g, m2_u8g_box_icon);

	/* assign u8g font to index 0 */
	m2.setFont(0, u8g_font_7x13);

	  // Setup keys
	  m2.setPin(M2_KEY_SELECT, uiKeySelectPin);
	  m2.setPin(M2_KEY_PREV, uiKeyUpPin);
	  m2.setPin(M2_KEY_NEXT, uiKeyDownPin);
	  m2.setPin(M2_KEY_EXIT, uiKeyExitPin);

	init_pwm();

	SHT21.Init();

	IAQcore.Init();

	initApplication();
}

/*
 * The main processing loop.
 */
void loop() {

	 m2.checkKey();
	  if ( m2.handleKey() != 0 ) {
	    u8g_FirstPage(&u8g);
	    do {
	      m2.checkKey();
	      draw();
	    } while( u8g_NextPage(&u8g) );
	  }

//	u8g_FirstPage(&u8g);
//	do {
//		draw_menu();
//	} while (u8g_NextPage(&u8g));

//	uint16_t CO2eq;
//	uint8_t status;
//	uint32_t resistance;
//	uint16_t Tvoc;
//
//	uint8_t temp_cycle = 0;
//
//    int debounceTime = userEeprom[EE_TIMING_PARAMS_BASE + 3];
//    int objno, channel, value, lastValue;
//
//	//uint8_t pos = 0;
//
//	/* picture loop */
//	u8g_FirstPage(&u8g);
//	do {
//		temperature_screen();
//	} while (u8g_NextPage(&u8g));
//
//	SHT21.GetHumidity();
//	IAQcore.GetIAQ(CO2eq, status, resistance, Tvoc);
//	delay(1000);
//
//
//	// Handle the input pins
//	for (channel = 0; channel < NUM_CHANNELS; ++channel)
//	{
//		lastValue = inputDebouncer[channel].value();
//	    value = inputDebouncer[channel].debounce(digitalRead(inputPins[channel]), debounceTime);
//
//	    if (lastValue != value)
//	    	inputChanged(channel, value);
//	}

//    draw_state++;
//    if ( draw_state >= 5*8 )
//      draw_state = 0;

	/* refresh screen after some delay */
//	u8g_Delay(100);
}

