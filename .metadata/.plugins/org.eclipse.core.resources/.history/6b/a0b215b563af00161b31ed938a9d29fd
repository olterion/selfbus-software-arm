/*
 *  A simple example for SPI.

 *
 *  This example configures SPI for output and sends a byte every second.
 *
 *  Copyright (c) 2014 Stefan Taferner <stefan.taferner@gmx.at>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 3 as
 *  published by the Free Software Foundation.
 */
#include <stdlib.h>

#include <sblib/eib/sblib_default_objects.h>
#include <sblib/core.h>
#include <sblib/ioports.h>
#include <sblib/spi.h>
#include <sblib/serial.h>
#include <sblib/timeout.h>

#include <u8g_arm.h>
#include <M2tk.h>
#include <m2ghu8g.h>

#include "lcd.h"
#include "params.h"
#include <sblib/i2c/SHT2x.h>
#include <sblib/i2c/iaq-core.h>
#include "pwm.h"
#include "app_temp_control.h"

#define _DEBUG__

#ifdef _DEBUG__
Serial Serial(PIO2_7, PIO2_8);
#endif

//SPI spi(SPI_PORT_0);

int blinkPin = PIO0_7;

SHT2xClass SHT21;

IAQcoreClass IAQcore;

// Debouncers for inputs
Debouncer inputDebouncer[NUM_CHANNELS]; // debouncing for both buttons

// Timeout
Timeout timeout[NUM_TIMED_VALUES];




//=================================================
// Forward declaration of the toplevel element
M2_EXTERN_ALIGN(top_el_expandable_menu);

/*=== radio button selection  ===*/
uint8_t rb_select_color = 0;

M2_LABEL(el_rb_label1, NULL, "red");
M2_RADIO(el_rb_radio1, "v0", &rb_select_color);

M2_LABEL(el_rb_label2, NULL, "green");
M2_RADIO(el_rb_radio2, "v1", &rb_select_color);

M2_LABEL(el_rb_label3, NULL, "blue");
M2_RADIO(el_rb_radio3, "v2", &rb_select_color);

M2_ROOT(el_rb_goto_top, NULL, " top menu ", &top_el_expandable_menu);

M2_LIST(list_rb) = {
    &el_rb_label1, &el_rb_radio1,
    &el_rb_label2, &el_rb_radio2,
    &el_rb_label3, &el_rb_radio3,
    &el_rb_goto_top
};
M2_GRIDLIST(el_rb_grid, "c2",list_rb);
M2_ALIGN(el_top_rb, "-1|1W64H64", &el_rb_grid);

/*=== combo examples  ===*/

uint8_t select_color = 0;
uint8_t select_priority = 0;

void fn_ok(m2_el_fnarg_p fnarg) {
  /* accept selection */
  m2_SetRoot(&top_el_expandable_menu);
}

void fn_cancel(m2_el_fnarg_p fnarg) {
  /* discard selection */
  m2_SetRoot(&top_el_expandable_menu);
}

const char *fn_idx_to_color(uint8_t idx)
{
  if ( idx == 0 )
    return "red";
  else if (idx == 1 )
    return "green";
  return "blue";
}

const char *fn_idx_to_priority(uint8_t idx)
{
  switch(idx)
  {
    case 0: return "lowest";
    case 1: return "low";
    case 2: return "medium";
    case 3: return "high";
    case 4: return "highest";
  }
  return "";
}


M2_LABEL(el_label1, NULL, "Color:");
M2_COMBO(el_combo1, NULL, &select_color, 3, fn_idx_to_color);

M2_LABEL(el_label2, NULL, "Priority: ");
M2_COMBO(el_combo2, "v1", &select_priority, 5, fn_idx_to_priority);

M2_BUTTON(el_cancel, "f4", "cancel", fn_cancel);
M2_BUTTON(el_ok, "f4", "ok", fn_ok);

M2_LIST(list_combo) = {
    &el_label1, &el_combo1,
    &el_label2, &el_combo2,
    &el_cancel, &el_ok
};
M2_GRIDLIST(el_combo_grid, "c2", list_combo);
M2_ALIGN(el_top_combo, "-1|1W64H64", &el_combo_grid);


/*=== number entry ===*/

uint8_t u8num = 0;
uint32_t u32num = 0;

void fn_num_zero(m2_el_fnarg_p fnarg) {
  u8num = 0;
  u32num = 0;
}

M2_LABEL(el_num_label1, NULL, "U8:");
M2_U8NUM(el_num_1, NULL, 0, 255, &u8num);

M2_LABEL(el_num_label2, NULL, "U32:");
M2_U32NUM(el_num_2, "c5", &u32num);

M2_BUTTON(el_num_zero, "f4", " zero ", fn_num_zero);
M2_ROOT(el_num_goto_top, "f4", " back ", &top_el_expandable_menu);

M2_LIST(num_list) = {
    &el_num_label1, &el_num_1,
    &el_num_label2, &el_num_2,
    &el_num_zero, &el_num_goto_top
};
M2_GRIDLIST(el_num_menu_grid, "c2", num_list);
M2_ALIGN(el_top_num_menu, "-1|1W64H64", &el_num_menu_grid);

/*=== multi selection ===*/

#define MULTI_SELECT_CNT 3
const char *multi_select_strings[MULTI_SELECT_CNT] = { "red", "green", "blue" };
uint8_t multi_select_status[MULTI_SELECT_CNT] = { 0, 0, 0};

uint8_t el_muse_first = 0;
uint8_t el_muse_cnt = MULTI_SELECT_CNT;

const char *el_muse_strlist_cb(uint8_t idx, uint8_t msg) {
  const char *s = "";
  if ( msg == M2_STRLIST_MSG_SELECT ) {
    if ( multi_select_status[idx] == 0 ) {
      multi_select_status[idx] = 1;
    }
    else {
      multi_select_status[idx] = 0;
    }
  }
  if ( msg == M2_STRLIST_MSG_GET_STR ) {
    s = multi_select_strings[idx];
  }
  if ( msg == M2_STRLIST_MSG_GET_EXTENDED_STR ) {
    if ( multi_select_status[idx] == 0 ) {
      s = " ";
    }
    else {
      s = "*";
    }
  }
  return s;
}

M2_STRLIST(el_muse_strlist, "l3F0E10W46", &el_muse_first, &el_muse_cnt, el_muse_strlist_cb);
M2_ROOT(el_muse_goto_top, "f4", "Goto Top Menu", &top_el_expandable_menu);

M2_LIST(muse_list) = {
    &el_muse_strlist,
    &el_muse_goto_top,
};
M2_VLIST(el_muse_vlist, "c2", muse_list);
M2_ALIGN(top_el_muse, "-1|1W64H64", &el_muse_vlist);

/*=== File selection dialog ===*/

/* defines the number of additional buttons at the beginning of the STRLIST lines */
#define FS_EXTRA_MENUES 1

/* helper variables for the strlist element */
uint8_t fs_m2tk_first = 0;
uint8_t fs_m2tk_cnt = 0;

const char *fs_strlist_getstr(uint8_t idx, uint8_t msg)  {
  if (msg == M2_STRLIST_MSG_GET_STR)  {
    /* Check for the extra button: Return string for this extra button */
    if ( idx == 0 )
      return "..";
    /* Not the extra button: Return file/directory name */
    mas_GetDirEntry(idx - FS_EXTRA_MENUES);
    return mas_GetFilename();
  } else if ( msg == M2_STRLIST_MSG_GET_EXTENDED_STR ) {
    /* Check for the extra button: Return icon for this extra button */
    if ( idx == 0 )
      return "a";       /* arrow left of the m2icon font */
    /* Not the extra button: Return file or directory icon */
    mas_GetDirEntry(idx - FS_EXTRA_MENUES);
    if ( mas_IsDir() )
      return "A";       /* folder icon of the m2icon font */
    return "B";         /* file icon of the m2icon font */
  } else if ( msg == M2_STRLIST_MSG_SELECT ) {
    /* Check for the extra button: Execute button action */
    if ( idx == 0 ) {
      if ( mas_GetPath()[0] == '\0' )
        m2_SetRoot(&top_el_expandable_menu);
      else {
        mas_ChDirUp();
        m2_SetRoot(m2_GetRoot());  /* reset menu to first element, send NEW_DIALOG and force recount */
      }
    /* Not the extra button: Goto subdir or return (with selected file) */
    } else {
      mas_GetDirEntry(idx - FS_EXTRA_MENUES);
      if ( mas_IsDir() ) {
        mas_ChDir(mas_GetFilename());
        m2_SetRoot(m2_GetRoot());  /* reset menu to first element, send NEW_DIALOG and force recount */
      } else {
	/* File has been selected. Here: Show the file to the user, but here, we just jump back to the main menu */
        m2_SetRoot(&top_el_expandable_menu);
      }
    }
  } else if ( msg == M2_STRLIST_MSG_NEW_DIALOG ) {
    /* (re-) calculate number of entries, limit no of entries to 250 */
    if ( mas_GetDirEntryCnt() < 250-FS_EXTRA_MENUES )
      fs_m2tk_cnt = mas_GetDirEntryCnt()+FS_EXTRA_MENUES;
    else
      fs_m2tk_cnt = 250;
  }
  return NULL;
}

M2_STRLIST(el_fs_strlist, "l5F3e15W49", &fs_m2tk_first, &fs_m2tk_cnt, fs_strlist_getstr);
M2_SPACE(el_fs_space, "W1h1");
M2_VSB(el_fs_strlist_vsb, "l5W4r1", &fs_m2tk_first, &fs_m2tk_cnt);
M2_LIST(list_fs_strlist) = { &el_fs_strlist, &el_fs_space, &el_fs_strlist_vsb };
M2_HLIST(el_fs_hlist, NULL, list_fs_strlist);
M2_ALIGN(el_top_fs, "-1|1W64H64", &el_fs_hlist);


// Left entry: Menu name. Submenus must have a '.' at the beginning
// Right entry: Reference to the target dialog box (In this example all menus call the toplevel element again
m2_menu_entry m2_2lmenu_data[] =
{
  { "Selection", NULL },
  { ". Radio", &el_rb_grid },
  { ". Combo", &el_top_combo },
  { "Numbers ", &el_top_num_menu },
  { "Complex", NULL },
  { ". Multi Select", &top_el_muse },
  { ". File Select", &el_top_fs },
  { "Menu 4", &top_el_expandable_menu },
  { "Menu 5", NULL },
  { ". Sub 5-1", &top_el_expandable_menu },
  { ". Sub 5-2", &top_el_expandable_menu },
  { ". Sub 5-3", &top_el_expandable_menu },
  { NULL, NULL },
};

// The first visible line and the total number of visible lines.
// Both values are written by M2_2LMENU and read by M2_VSB
uint8_t m2_2lmenu_first;
uint8_t m2_2lmenu_cnt;

// M2_2LMENU definition
// Option l4 = four visible lines
// Option e15 = first column has a width of 15 pixel
// Option W43 = second column has a width of 43/64 of the display width

M2_2LMENU(el_2lmenu,"l4F3e15W43",&m2_2lmenu_first,&m2_2lmenu_cnt, m2_2lmenu_data,65,102,'\0');
M2_SPACE(el_space, "W1h1");
M2_VSB(el_vsb, "l4W2r1", &m2_2lmenu_first, &m2_2lmenu_cnt);
M2_LIST(list_2lmenu) = { &el_2lmenu, &el_space, &el_vsb };
M2_HLIST(el_hlist, NULL, list_2lmenu);
M2_ALIGN(top_el_expandable_menu, "-1|1W64H64", &el_hlist);

// m2 object and constructor
M2tk m2(&top_el_expandable_menu, m2_es_arduino, m2_eh_4bs, m2_gh_u8g_ffs);
//M2tk m2(&top_el_expandable_menu, m2_es_arduino_rotary_encoder, m2_eh_4bs, m2_gh_u8g_ffs);
//M2tk m2(&top_el_expandable_menu, m2_es_arduino, m2_eh_4bs, m2_gh_arduino_serial);

//=================================================
// Draw procedure, Arduino Setup & Loop


void draw(void) {
  m2.draw();
}





/*
 * Initialize the application.
 */
void setup() {

//	bcu.setProgPin(PIN_PROG);

	bcu.begin(76, 0x474, 2);  // we are a MDT temperatur controller, version 1.2

//	pinMode(blinkPin, OUTPUT);

//	memcpy(userEeprom.order, hardwareVersion, sizeof(hardwareVersion));

	// Enable the serial port with 19200 baud, no parity, 1 stop bit
#ifdef _DEBUG__
	serial.begin(19200);
	serial.println("UC1701x Display Taster TEST");
#endif

	// Configure the input pins and initialize the debouncers with the current
	// value of the pin.
//	for (int channel = 0; channel < NUM_CHANNELS; ++channel) {
//		pinMode(inputPins[channel], INPUT | HYSTERESIS | PULL_UP);
//		inputDebouncer[channel].init(digitalRead(inputPins[channel]));
//	}

	initLCD();

	init_pwm();
	setPWM(3);

	SHT21.Init();

	IAQcore.Init();

	initApplication();
}

/*
 * The main processing loop.
 */
void loop() {


	 m2.checkKey();
	  if ( m2.handleKey() != 0 ) {
		  u8g_FirstPage(&u8g);
	    do {
	      m2.checkKey();
	      draw();
	    } while( u8g_NextPage(&u8g) );
	  }




//	m2.checkKey();
//	if (m2.handleKey() || update_graphics() != 0 ) {
//		u8g_FirstPage(&u8g);
//		do {
//			draw_menu();
//		} while (u8g_NextPage(&u8g));
//	}



//	u8g_FirstPage(&u8g);
//	do {
//		draw_menu();
//	} while (u8g_NextPage(&u8g));

//	uint16_t CO2eq;
//	uint8_t status;
//	uint32_t resistance;
//	uint16_t Tvoc;
//
//	uint8_t temp_cycle = 0;
//
//    int debounceTime = userEeprom[EE_TIMING_PARAMS_BASE + 3];
//    int objno, channel, value, lastValue;
//
//	//uint8_t pos = 0;
//
//	/* picture loop */
//	u8g_FirstPage(&u8g);
//	do {
//		temperature_screen();
//	} while (u8g_NextPage(&u8g));
//
//	SHT21.GetHumidity();
//	IAQcore.GetIAQ(CO2eq, status, resistance, Tvoc);
//	delay(1000);
//
//
//	// Handle the input pins
//	for (channel = 0; channel < NUM_CHANNELS; ++channel)
//	{
//		lastValue = inputDebouncer[channel].value();
//	    value = inputDebouncer[channel].debounce(digitalRead(inputPins[channel]), debounceTime);
//
//	    if (lastValue != value)
//	    	inputChanged(channel, value);
//	}

//    draw_state++;
//    if ( draw_state >= 5*8 )
//      draw_state = 0;

	/* refresh screen after some delay */
//	u8g_Delay(100);
}

